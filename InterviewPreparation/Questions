Can Garbage collection be forcibly called in java???
Garbage collection in java can not be enforced. But still sometimes, we call the System.gc( ) method explicitly. System.gc() method provides just a "hint" to the JVM that garbage collection should run. It is not guaranteed!

How do you make an object eligible for garbage collection???
a. Nullifying reference variable
b. Re- assigning reference variable
c. Objects created inside method

How do you create immutable classes???
1.The class must be declared as final (So that child classes can’t be created)
2.Data members in the class must be declared as final (So that we can’t change the value of it after object creation)
3.A parameterized constructor
4.Getter method for all the variables in it
5.No setters(To not have the option to change the value of the instance variable)

wait,notify,notifyall are in object class

Why wait,notify,notifyall are in object class??
wait - wait method tells the current thread to give up monitor and go to sleep.
notify - Wakes up a single thread that is waiting on this object's monitor.
So you see wait() and notify() methods work at the monitor level, thread which is currently holding the monitor is asked to give up that monitor through wait() method and through notify() method (or notifyAll) threads which are waiting on the object's monitor are notified that threads can wake up.
Important point to note here is that monitor is assigned to an object not to a particular thread.Thats one reason why these methods are in Object class.

What is race condition??
Race condition in Java occurs in a multi-threaded environment when more than one thread try to access a shared resource (modify, write) at the same time. 
Since multiple threads try to race each other to finish executing a method thus the name race condition.

 Your application/API is responding slow what are all the reason ??
A. Database Level - More Joins,Caching
B. Server Side - nested loops, complex logic
C. Client Side - getting lot of data in response bcoz of which browser is taking lot of time to download


Difference between new(),newInstance(),Class.forname();

The new operator creates a new object of a type that's known statically (at compile-time) and can call any constructor on the object you're trying to create. It's the preferred way of creating an object - it's fast and the JVM does lots of aggressive optimizations on it.

Class.forName().newInstance() is a dynamic construct that looks up a class with a specific name. It's slower than using new because the type of object can't be hardcoded into the bytecode, and because the JVM might have to do permissions checking to ensure that you have the authority to create an object. It's also partially unsafe because it always uses a zero-argument constructor, and if the object you're trying to create doesn't have a nullary constructor it throws an exception.

In short, use new if you know at compile-time what the type of the object is that you want to create. Use Class.forName().newInstance() if you don't know what type of object you'll be making.

https://narayanatutorial.com/interview-questions/java-basics/difference-class-forname-newinstance-java

https://stackoverflow.com/questions/14997202/creating-object-with-reference-to-interface

Which data structure you prefer to store passwords

https://www.techiedelight.com/why-character-array-preferred-over-string-storing-passwords/

Streams or for loop which is fast

Initiated one object with null, then what can be accessed using this object without getting null pointer exception 
Static blocks and methods can be accessed without null point exception.


Best way to create singleton
https://medium.com/@kevalpatel2106/how-to-make-the-perfect-singleton-de6b951dfdb0
https://stackoverflow.com/questions/11639746/what-is-the-point-of-making-the-singleton-instance-volatile-while-using-double-l

Clean way to avoid null pointer exception
Abstract class Vs Interface
Encapsulation vs Abstarction

Stateful and stateless class

Stateless object is an instance of a class without instance fields (instance variables). The class may have fields, but they are compile-time constants (static final).
A very much related term is immutable. Immutable objects may have state, but it does not change when a method is invoked (method invocations do not assign new values to fields). These objects are also thread-safe.

https://stackoverflow.com/questions/9735601/what-is-stateless-object-in-java